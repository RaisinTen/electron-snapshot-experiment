diff --git a/node_modules/ws/lib/buffer-util.js b/node_modules/ws/lib/buffer-util.js
index df75955..eb45181 100644
--- a/node_modules/ws/lib/buffer-util.js
+++ b/node_modules/ws/lib/buffer-util.js
@@ -1,6 +1,6 @@
 'use strict';
 
-const { EMPTY_BUFFER } = require('./constants');
+const { GET_EMPTY_BUFFER } = require('./constants');
 
 /**
  * Merges an array of buffers into a new buffer.
@@ -11,7 +11,7 @@ const { EMPTY_BUFFER } = require('./constants');
  * @public
  */
 function concat(list, totalLength) {
-  if (list.length === 0) return EMPTY_BUFFER;
+  if (list.length === 0) return GET_EMPTY_BUFFER();
   if (list.length === 1) return list[0];
 
   const target = Buffer.allocUnsafe(totalLength);
@@ -106,22 +106,3 @@ module.exports = {
   toBuffer,
   unmask: _unmask
 };
-
-/* istanbul ignore else  */
-if (!process.env.WS_NO_BUFFER_UTIL) {
-  try {
-    const bufferUtil = require('bufferutil');
-
-    module.exports.mask = function (source, mask, output, offset, length) {
-      if (length < 48) _mask(source, mask, output, offset, length);
-      else bufferUtil.mask(source, mask, output, offset, length);
-    };
-
-    module.exports.unmask = function (buffer, mask) {
-      if (buffer.length < 32) _unmask(buffer, mask);
-      else bufferUtil.unmask(buffer, mask);
-    };
-  } catch (e) {
-    // Continue regardless of the error.
-  }
-}
diff --git a/node_modules/ws/lib/constants.js b/node_modules/ws/lib/constants.js
index d691b30..3b75fe7 100644
--- a/node_modules/ws/lib/constants.js
+++ b/node_modules/ws/lib/constants.js
@@ -1,8 +1,16 @@
 'use strict';
 
+// Buffer is not a part of the V8 snapshot, so instead of calling Buffer.alloc()
+// directly, export a function that calls that instead.
+let emptyBuffer;
+function GET_EMPTY_BUFFER() {
+  if (!emptyBuffer) emptyBuffer = Buffer.alloc(0);
+  return emptyBuffer;
+}
+
 module.exports = {
   BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
-  EMPTY_BUFFER: Buffer.alloc(0),
+  GET_EMPTY_BUFFER,
   GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
   kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),
   kListener: Symbol('kListener'),
diff --git a/node_modules/ws/lib/permessage-deflate.js b/node_modules/ws/lib/permessage-deflate.js
index 94603c9..99b4e10 100644
--- a/node_modules/ws/lib/permessage-deflate.js
+++ b/node_modules/ws/lib/permessage-deflate.js
@@ -6,7 +6,13 @@ const bufferUtil = require('./buffer-util');
 const Limiter = require('./limiter');
 const { kStatusCode } = require('./constants');
 
-const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
+// Buffer is not a part of the V8 snapshot, so instead of calling Buffer.alloc()
+// directly, use a function that calls that instead.
+let TRAILER;
+function initTrailer() {
+  if (TRAILER) return;
+  TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
+}
 const kPerMessageDeflate = Symbol('permessage-deflate');
 const kTotalLength = Symbol('total-length');
 const kCallback = Symbol('callback');
@@ -359,7 +365,10 @@ class PerMessageDeflate {
     this._inflate[kCallback] = callback;
 
     this._inflate.write(data);
-    if (fin) this._inflate.write(TRAILER);
+    if (fin) {
+      initTrailer();
+      this._inflate.write(TRAILER);
+    }
 
     this._inflate.flush(() => {
       const err = this._inflate[kError];
diff --git a/node_modules/ws/lib/receiver.js b/node_modules/ws/lib/receiver.js
index 2d29d62..8f62570 100644
--- a/node_modules/ws/lib/receiver.js
+++ b/node_modules/ws/lib/receiver.js
@@ -5,7 +5,7 @@ const { Writable } = require('stream');
 const PerMessageDeflate = require('./permessage-deflate');
 const {
   BINARY_TYPES,
-  EMPTY_BUFFER,
+  GET_EMPTY_BUFFER,
   kStatusCode,
   kWebSocket
 } = require('./constants');
@@ -24,7 +24,7 @@ const INFLATING = 5;
  *
  * @extends Writable
  */
-class Receiver extends Writable {
+class Receiver {
   /**
    * Creates a Receiver instance.
    *
@@ -39,7 +39,7 @@ class Receiver extends Writable {
    *     not to skip UTF-8 validation for text and close messages
    */
   constructor(options = {}) {
-    super();
+    Writable.call(this);
 
     this._binaryType = options.binaryType || BINARY_TYPES[0];
     this._extensions = options.extensions || {};
@@ -408,7 +408,7 @@ class Receiver extends Writable {
    * @private
    */
   getData(cb) {
-    let data = EMPTY_BUFFER;
+    let data = GET_EMPTY_BUFFER();
 
     if (this._payloadLength) {
       if (this._bufferedBytes < this._payloadLength) {
@@ -544,7 +544,7 @@ class Receiver extends Writable {
       this._loop = false;
 
       if (data.length === 0) {
-        this.emit('conclude', 1005, EMPTY_BUFFER);
+        this.emit('conclude', 1005, GET_EMPTY_BUFFER());
         this.end();
       } else if (data.length === 1) {
         return error(
diff --git a/node_modules/ws/lib/sender.js b/node_modules/ws/lib/sender.js
index c848853..811ee03 100644
--- a/node_modules/ws/lib/sender.js
+++ b/node_modules/ws/lib/sender.js
@@ -7,12 +7,16 @@ const tls = require('tls');
 const { randomFillSync } = require('crypto');
 
 const PerMessageDeflate = require('./permessage-deflate');
-const { EMPTY_BUFFER } = require('./constants');
+const { GET_EMPTY_BUFFER } = require('./constants');
 const { isValidStatusCode } = require('./validation');
 const { mask: applyMask, toBuffer } = require('./buffer-util');
 
 const kByteLength = Symbol('kByteLength');
-const maskBuffer = Buffer.alloc(4);
+let maskBuffer;
+function initMaskBuffer() {
+  if (maskBuffer) return;
+  maskBuffer = Buffer.alloc(4);
+}
 
 /**
  * HyBi Sender implementation.
@@ -72,6 +76,7 @@ class Sender {
     let skipMasking = false;
 
     if (options.mask) {
+      initMaskBuffer();
       mask = options.maskBuffer || maskBuffer;
 
       if (options.generateMask) {
@@ -157,7 +162,7 @@ class Sender {
     let buf;
 
     if (code === undefined) {
-      buf = EMPTY_BUFFER;
+      buf = GET_EMPTY_BUFFER();
     } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
       throw new TypeError('First argument must be a valid error code number');
     } else if (data === undefined || !data.length) {
diff --git a/node_modules/ws/lib/validation.js b/node_modules/ws/lib/validation.js
index 44fc202..a81e1f1 100644
--- a/node_modules/ws/lib/validation.js
+++ b/node_modules/ws/lib/validation.js
@@ -110,16 +110,3 @@ module.exports = {
   isValidUTF8: _isValidUTF8,
   tokenChars
 };
-
-/* istanbul ignore else  */
-if (!process.env.WS_NO_UTF_8_VALIDATE) {
-  try {
-    const isValidUTF8 = require('utf-8-validate');
-
-    module.exports.isValidUTF8 = function (buf) {
-      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);
-    };
-  } catch (e) {
-    // Continue regardless of the error.
-  }
-}
diff --git a/node_modules/ws/lib/websocket.js b/node_modules/ws/lib/websocket.js
index 4391c73..97facb6 100644
--- a/node_modules/ws/lib/websocket.js
+++ b/node_modules/ws/lib/websocket.js
@@ -16,7 +16,7 @@ const Receiver = require('./receiver');
 const Sender = require('./sender');
 const {
   BINARY_TYPES,
-  EMPTY_BUFFER,
+  GET_EMPTY_BUFFER,
   GUID,
   kForOnEventAttribute,
   kListener,
@@ -41,7 +41,7 @@ const subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;
  *
  * @extends EventEmitter
  */
-class WebSocket extends EventEmitter {
+class WebSocket {
   /**
    * Create a new `WebSocket`.
    *
@@ -50,13 +50,13 @@ class WebSocket extends EventEmitter {
    * @param {Object} [options] Connection options
    */
   constructor(address, protocols, options) {
-    super();
+    EventEmitter.call(this);
 
     this._binaryType = BINARY_TYPES[0];
     this._closeCode = 1006;
     this._closeFrameReceived = false;
     this._closeFrameSent = false;
-    this._closeMessage = EMPTY_BUFFER;
+    this._closeMessage = GET_EMPTY_BUFFER();
     this._closeTimer = null;
     this._extensions = {};
     this._paused = false;
@@ -369,7 +369,7 @@ class WebSocket extends EventEmitter {
     }
 
     if (mask === undefined) mask = !this._isServer;
-    this._sender.ping(data || EMPTY_BUFFER, mask, cb);
+    this._sender.ping(data || GET_EMPTY_BUFFER(), mask, cb);
   }
 
   /**
@@ -401,7 +401,7 @@ class WebSocket extends EventEmitter {
     }
 
     if (mask === undefined) mask = !this._isServer;
-    this._sender.pong(data || EMPTY_BUFFER, mask, cb);
+    this._sender.pong(data || GET_EMPTY_BUFFER(), mask, cb);
   }
 
   /**
@@ -465,7 +465,7 @@ class WebSocket extends EventEmitter {
       opts.compress = false;
     }
 
-    this._sender.send(data || EMPTY_BUFFER, opts, cb);
+    this._sender.send(data || GET_EMPTY_BUFFER(), opts, cb);
   }
 
   /**
