diff --git a/node_modules/node-forge/lib/pbkdf2.js b/node_modules/node-forge/lib/pbkdf2.js
index 714560e..33e5b56 100644
--- a/node_modules/node-forge/lib/pbkdf2.js
+++ b/node_modules/node-forge/lib/pbkdf2.js
@@ -14,10 +14,7 @@ require('./util');
 
 var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};
 
-var crypto;
-if(forge.util.isNodejs && !forge.options.usePureJavaScript) {
-  crypto = require('crypto');
-}
+var crypto = require('crypto');
 
 /**
  * Derives a key from a password.
diff --git a/node_modules/node-forge/lib/prng.js b/node_modules/node-forge/lib/prng.js
index c2f5f05..32afb04 100644
--- a/node_modules/node-forge/lib/prng.js
+++ b/node_modules/node-forge/lib/prng.js
@@ -12,11 +12,7 @@
 var forge = require('./forge');
 require('./util');
 
-var _crypto = null;
-if(forge.util.isNodejs && !forge.options.usePureJavaScript &&
-  !process.versions['node-webkit']) {
-  _crypto = require('crypto');
-}
+var _crypto = require('crypto');
 
 /* PRNG API */
 var prng = module.exports = forge.prng = forge.prng || {};
diff --git a/node_modules/node-forge/lib/random.js b/node_modules/node-forge/lib/random.js
index d4e4bea..a937374 100644
--- a/node_modules/node-forge/lib/random.js
+++ b/node_modules/node-forge/lib/random.js
@@ -109,82 +109,11 @@ function spawnPrng() {
   return ctx;
 }
 
-// create default prng context
-var _ctx = spawnPrng();
-
-// add other sources of entropy only if window.crypto.getRandomValues is not
-// available -- otherwise this source will be automatically used by the prng
-var getRandomValues = null;
-var globalScope = forge.util.globalScope;
-var _crypto = globalScope.crypto || globalScope.msCrypto;
-if(_crypto && _crypto.getRandomValues) {
-  getRandomValues = function(arr) {
-    return _crypto.getRandomValues(arr);
-  };
-}
-
-if(forge.options.usePureJavaScript ||
-  (!forge.util.isNodejs && !getRandomValues)) {
-  // if this is a web worker, do not use weak entropy, instead register to
-  // receive strong entropy asynchronously from the main thread
-  if(typeof window === 'undefined' || window.document === undefined) {
-    // FIXME:
-  }
-
-  // get load time entropy
-  _ctx.collectInt(+new Date(), 32);
-
-  // add some entropy from navigator object
-  if(typeof(navigator) !== 'undefined') {
-    var _navBytes = '';
-    for(var key in navigator) {
-      try {
-        if(typeof(navigator[key]) == 'string') {
-          _navBytes += navigator[key];
-        }
-      } catch(e) {
-        /* Some navigator keys might not be accessible, e.g. the geolocation
-          attribute throws an exception if touched in Mozilla chrome://
-          context.
-
-          Silently ignore this and just don't use this as a source of
-          entropy. */
-      }
-    }
-    _ctx.collect(_navBytes);
-    _navBytes = null;
-  }
-
-  // add mouse and keyboard collectors if jquery is available
-  if(jQuery) {
-    // set up mouse entropy capture
-    jQuery().mousemove(function(e) {
-      // add mouse coords
-      _ctx.collectInt(e.clientX, 16);
-      _ctx.collectInt(e.clientY, 16);
-    });
-
-    // set up keyboard entropy capture
-    jQuery().keypress(function(e) {
-      _ctx.collectInt(e.charCode, 8);
-    });
-  }
-}
-
-/* Random API */
-if(!forge.random) {
-  forge.random = _ctx;
-} else {
-  // extend forge.random with _ctx
-  for(var key in _ctx) {
-    forge.random[key] = _ctx[key];
-  }
-}
-
-// expose spawn PRNG
-forge.random.createInstance = spawnPrng;
-
-module.exports = forge.random;
+// The default context is created and monkey-patched in unsnapshottable.js, so
+// that this can be snapshotted without requiring the use of the Node.js crypto
+// module.
+module.exports.forge = forge;
+module.exports.spawnPrng = spawnPrng;
 
 })(typeof(jQuery) !== 'undefined' ? jQuery : null);
 
diff --git a/node_modules/node-forge/lib/rsa.js b/node_modules/node-forge/lib/rsa.js
index 7c67917..ddae716 100644
--- a/node_modules/node-forge/lib/rsa.js
+++ b/node_modules/node-forge/lib/rsa.js
@@ -74,7 +74,7 @@ if(typeof BigInteger === 'undefined') {
   var BigInteger = forge.jsbn.BigInteger;
 }
 
-var _crypto = forge.util.isNodejs ? require('crypto') : null;
+var _crypto = require('crypto');
 
 // shortcut for asn.1 API
 var asn1 = forge.asn1;
diff --git a/node_modules/node-forge/lib/util.js b/node_modules/node-forge/lib/util.js
index 98dfd34..bd04250 100644
--- a/node_modules/node-forge/lib/util.js
+++ b/node_modules/node-forge/lib/util.js
@@ -11,117 +11,8 @@ var baseN = require('./baseN');
 /* Utilities API */
 var util = module.exports = forge.util = forge.util || {};
 
-// define setImmediate and nextTick
-(function() {
-  // use native nextTick (unless we're in webpack)
-  // webpack (or better node-libs-browser polyfill) sets process.browser.
-  // this way we can detect webpack properly
-  if(typeof process !== 'undefined' && process.nextTick && !process.browser) {
-    util.nextTick = process.nextTick;
-    if(typeof setImmediate === 'function') {
-      util.setImmediate = setImmediate;
-    } else {
-      // polyfill setImmediate with nextTick, older versions of node
-      // (those w/o setImmediate) won't totally starve IO
-      util.setImmediate = util.nextTick;
-    }
-    return;
-  }
-
-  // polyfill nextTick with native setImmediate
-  if(typeof setImmediate === 'function') {
-    util.setImmediate = function() { return setImmediate.apply(undefined, arguments); };
-    util.nextTick = function(callback) {
-      return setImmediate(callback);
-    };
-    return;
-  }
-
-  /* Note: A polyfill upgrade pattern is used here to allow combining
-  polyfills. For example, MutationObserver is fast, but blocks UI updates,
-  so it needs to allow UI updates periodically, so it falls back on
-  postMessage or setTimeout. */
-
-  // polyfill with setTimeout
-  util.setImmediate = function(callback) {
-    setTimeout(callback, 0);
-  };
-
-  // upgrade polyfill to use postMessage
-  if(typeof window !== 'undefined' &&
-    typeof window.postMessage === 'function') {
-    var msg = 'forge.setImmediate';
-    var callbacks = [];
-    util.setImmediate = function(callback) {
-      callbacks.push(callback);
-      // only send message when one hasn't been sent in
-      // the current turn of the event loop
-      if(callbacks.length === 1) {
-        window.postMessage(msg, '*');
-      }
-    };
-    function handler(event) {
-      if(event.source === window && event.data === msg) {
-        event.stopPropagation();
-        var copy = callbacks.slice();
-        callbacks.length = 0;
-        copy.forEach(function(callback) {
-          callback();
-        });
-      }
-    }
-    window.addEventListener('message', handler, true);
-  }
-
-  // upgrade polyfill to use MutationObserver
-  if(typeof MutationObserver !== 'undefined') {
-    // polyfill with MutationObserver
-    var now = Date.now();
-    var attr = true;
-    var div = document.createElement('div');
-    var callbacks = [];
-    new MutationObserver(function() {
-      var copy = callbacks.slice();
-      callbacks.length = 0;
-      copy.forEach(function(callback) {
-        callback();
-      });
-    }).observe(div, {attributes: true});
-    var oldSetImmediate = util.setImmediate;
-    util.setImmediate = function(callback) {
-      if(Date.now() - now > 15) {
-        now = Date.now();
-        oldSetImmediate(callback);
-      } else {
-        callbacks.push(callback);
-        // only trigger observer when it hasn't been triggered in
-        // the current turn of the event loop
-        if(callbacks.length === 1) {
-          div.setAttribute('a', attr = !attr);
-        }
-      }
-    };
-  }
-
-  util.nextTick = util.setImmediate;
-})();
-
 // check if running under Node.js
-util.isNodejs =
-  typeof process !== 'undefined' && process.versions && process.versions.node;
-
-
-// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
-// it will point to `window` in the main thread.
-// To remain compatible with older browsers, we fall back to 'window' if 'self'
-// is not available.
-util.globalScope = (function() {
-  if(util.isNodejs) {
-    return global;
-  }
-
-  return typeof self === 'undefined' ? window : self;
-})();
+util.isNodejs = true;
 
 // define isArray
 util.isArray = Array.isArray || function(x) {
